(define (average a b) (/ (+ a b) 2.0))
(define (average-damp f)
  (lambda (x) (average x (f x))))
(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
(define (fixed-point-of-transform g transform guess)
  (fixed-point (transform g) guess))
(define (compose f g)
  (lambda (x) (f (g x))))
(define (repeated f n)
  (if (= n 1)
      f
      (compose f (repeated f (- n 1)))))

(define (nth-root x n)
  (fixed-point-of-transform (lambda (y)
      (let ((power (lambda (base ex)
          ((repeated (lambda (i) (* base i))
              ex)
            1))))
        (/ x (power y (- n 1)))))
    (repeated average-damp (quotient n 2))
    1.0))


(define (sqrt x)
  (nth-root x 2))
(define (cbrt x)
  (nth-root x 3))

(sqrt 2)
(cbrt 8)
(nth-root 16 4)
(nth-root 32 5)
(nth-root 64 6)